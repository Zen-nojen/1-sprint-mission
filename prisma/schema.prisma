// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id             Int            @id @default(autoincrement())
  title          String
  content        String
  image          String?
  ArticleComment Comment[]
  author         User           @relation(fields: [authorId], references: [id])
  authorId       Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  LikedArticles  LikedArticle[]
}

model Product {
  id             Int            @id @default(autoincrement())
  name           String
  description    String
  price          Int
  tags           String[]
  images         String[]
  ProductComment Comment[]
  author         User           @relation(fields: [authorId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  authorId       Int
  LikedProducts  LikedProduct[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  nickname      String         @unique
  image         String?
  password      String
  refreshToken  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Article       Article[]
  Product       Product[]
  Comment       Comment[]
  LikedProducts LikedProduct[]
  LikedArticles LikedArticle[]
}

model LikedProduct {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())

  @@id([userId, productId])
}

model LikedArticle {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
  createdAt DateTime @default(now())

  @@id([userId, articleId])
}
